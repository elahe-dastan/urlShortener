package db

import (
	"errors"
	"github.com/elahe-dastan/urlShortener_KGS/config"
	"github.com/elahe-dastan/urlShortener_KGS/generator"
	"github.com/elahe-dastan/urlShortener_KGS/model"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/postgres"
	"log"
)


var configuration config.Constants

func SetConfig(constants config.Constants)  {
	configuration = constants
}

// Connects to the database and saves all the random short urls generated by the key generator service in it
func SaveShortURLs() {
	var db = connect()

	if db.HasTable(&model.ShortURL{}) {
		return
	}

	urls := generator.Generate()
	db.Debug().AutoMigrate(&model.ShortURL{})

	for _, url := range urls {
		db.Create(&url)
	}

	defer db.Close()
}

// Creates a table in the database that matches the Map table and puts a trigger on it which deletes the
// rows that have expired after each insert
func CreateMap() {
	var db = connect()

	if db.HasTable(&model.Map{}) {
		return
	}

	db.Debug().AutoMigrate(&model.Map{})

	db.Exec("create or replace function delete_expired_row() " +
					"returns trigger as " +
					"$BODY$ " +
					"begin " +
					"delete from short_to_long_url_maps where expiration_time < NOW(); " +
					"return null; " +
					"end; " +
					"$BODY$ " +
					"LANGUAGE plpgsql;" +
				"create trigger delete_expired_rows " +
					"after insert " +
					"on short_to_long_url_maps " +
					"for each row " +
					"execute procedure delete_expired_row();")

	defer db.Close()
}

func ChooseShortURL() string {
	var db = connect()
	defer db.Close()

	var selectedURL model.ShortURL
	db.Raw("UPDATE random_short_urls SET is_used = ? WHERE short_url = " +
		"(SELECT short_url FROM random_short_urls WHERE is_used = ? LIMIT 1 FOR UPDATE) " +
		"RETURNING *;", true, false).Scan(&selectedURL) //O(lgn)
	return selectedURL.URL
}

// Inserts a Map model in the database
func InsertMap(urlMap model.Map) error {
	var db = connect()
	err := db.Create(&urlMap).Error
	return err
}

// Gets a short url as parameter and returns a Map model
func Retrieve(url string) (model.Map, error) {
	var db = connect()
	var mapping model.Map

	db.Raw("SELECT * from short_url_maps WHERE short_url = ?;", url).Scan(&mapping) //O(lgn)

	var err error
	if mapping.LongURL == "" {
		err = errors.New("This short URL doesn't exist in the database")
	}

	return mapping, err
}

func connect() *gorm.DB {
	db, err := gorm.Open(configuration.DatabaseConfig.DBName, configuration.DatabaseConfig.ConnectionString)
	if err != nil {
		log.Fatalf("can not open connection to datbase due to the following err\n: %s", err)
	}
	return db
}