package store

import (
	"database/sql"
	"log"
	"time"

	"github.com/elahe-dastan/urlShortener/generator"
	"github.com/elahe-dastan/urlShortener/metric"
	"github.com/elahe-dastan/urlShortener/model"
	"github.com/prometheus/client_golang/prometheus"
)

type TinyURL interface {
}

type ShortURL struct {
	DB        *sql.DB
	Length    int
	Histogram prometheus.Histogram
}

func NewShortURL(d *sql.DB) ShortURL {
	return ShortURL{DB: d,
		Histogram: metric.NewHistogram("choosing_short_url_histogram")}
}

// Connects to the database and saves all the random short urls generated by the key generator service in it
func (url ShortURL) Save() {
	_, err := url.DB.Exec("CREATE TABLE IF NOT EXISTS short_url (" +
		"url VARCHAR PRIMARY KEY," +
		"is_used boolean NOT NULL" +
		");")
	if err != nil {
		log.Println("Cannot create short url table due to the following error", err.Error())
	}

	generator.Generate(url.DB, url.Length)
}

func (url ShortURL) Choose() string {
	var selectedURL model.ShortURL

	start := time.Now()

	defer func() {
		duration := time.Since(start)
		url.Histogram.Observe(duration.Seconds())
	}()

	err := url.DB.QueryRow("UPDATE short_url SET is_used = $1 WHERE url = "+
		"(SELECT url FROM short_url WHERE is_used = $2 LIMIT 1 FOR UPDATE) "+
		"RETURNING *;", true, false).Scan(&selectedURL.URL, &selectedURL.IsUsed)
	if err != nil {
		log.Println("Cannot select row from short url table due to the following error\n %s", err)
	}

	return selectedURL.URL
}

func (url ShortURL) Unique(shortURL string) bool {
	var s model.ShortURL
	err := url.DB.QueryRow("UPDATE short_url SET is_used = $1 WHERE url = $2 AND is_used = $3",
		true, shortURL, false).Scan(s.URL, s.IsUsed)

	if err == nil {
		return true
	}

	_, err = url.DB.Exec("INSERT into short_url VALUES ($1, true )", shortURL)

	return err == nil
}
